<% 

    const excerptHtml = require('excerpt-html')
    const he = require('he')

    let hostname = htmlWebpackPlugin.options.hostname
    let baseURL = htmlWebpackPlugin.options.baseURL
    let channelViewModel=htmlWebpackPlugin.options.channelViewModel 
    let routablePages = htmlWebpackPlugin.options.routablePages
    let firstItemPage = htmlWebpackPlugin.options.firstItemPage

    const link = (href) => {
        return `${baseURL + href}`
    }    

    const absoluteLink = (href) => {
        return `${hostname + baseURL + href}`
    }   

    const escapeExcerpt = (excerpt) => {
        excerpt = excerptHtml(excerpt, { pruneLength: 500 })
        return he.encode(excerpt.toString())
    }
%>


<!DOCTYPE html>
<html>

<head>
    <style>
    html {
        visibility: hidden;
        opacity: 0;
    }
    </style>

    <!-- Required meta tags-->
    <meta charset="utf-8">
    <meta name="viewport"
    content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui, viewport-fit=cover">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <!-- Color theme for statusbar -->
    <title>
        Explore <%=channelViewModel.channel.title%>
    </title>

    <meta property="og:title" content="Explore <%=channelViewModel.channel.title%>" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="<%= link(`explore.html`) %>" />
    <meta property="og:image" content="<%= absoluteLink(`backup/images/${channelViewModel.channel.coverImageId}.jpg`) %>" />
    <meta property="og:description" content="<%= escapeExcerpt(channelViewModel.channel.descriptionHTML)%>" />

    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="<%= link(`explore.html`) %>" />
    <meta property="twitter:title" content="Explore <%=channelViewModel.channel.title%>" />
    <meta property="twitter:description" content="<%= escapeExcerpt(channelViewModel.channel.descriptionHTML)%>" />
    <meta property="twitter:image" content="<%= absoluteLink(`backup/images/${channelViewModel.channel.coverImageId}.jpg`) %>" />

    <%= htmlWebpackPlugin.tags.headTags %>
    
</head>

<body>

    <div id="app">

        <div class="view view-main">

            <div class="page" data-name="explore">

                <nav-bar></nav-bar>

                <div class="page-content infinite-scroll-content" id="item-list-infinite-scroll">

                    <div class="row">
            
                        <div class="fixed-width-content center">
            
                            <div class="block-title block-title-medium">            
                                Explore <a href="${baseURL}"><%= channelViewModel.channel.title %></a>
                            </div>

                            
                            <div class="list cards-list virtual-list" id="explore-list">
                                <ul class="item-flex"></ul>
                            </div>

                            <div class="preloader infinite-scroll-preloader"></div>


                              
                        </div>
                    </div>
            
                </div>
              
            
            </div>

        </div>

    </div>

    <%= htmlWebpackPlugin.tags.bodyTags %>

    <script type="module" id="page-init-scripts">

        const init = (props, { $, $f7, $h, $on, $update }) => {

            let itemWebService = globalThis.container.get("ItemWebService")
            let uiService = globalThis.container.get("UiService")
            let channelService = globalThis.container.get("ChannelService")

            let baseURL = '<%= baseURL %>'
            let totalItemCount = parseInt('<%= channelViewModel.itemCount %>')


            let firstItemPage = JSON.parse(`<%= JSON.stringify(firstItemPage).replace(/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, "\\n") %>`)
      
            let itemsShown = 35
            let hasMoreItems = true
            let loadingInProgress = false
            let pageCounter=1

            let virtualList
            let items = []

            items.push(...firstItemPage.items)

            const resizeListener = (e) => {
                const viewPortWidth = getWidth()

                virtualList.params.cols = viewPortWidth >= 1024 ? 5 : 2
                virtualList.update()

                console.log("Resized...")

            }

            const getWidth = () => {
                return Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)
            }


            const virtualListParams = {

                    el: '#explore-list',
                    createUl: false,
                    renderItem(item) {
                        return getTemplate(item)
                    },
                    height: 300,
                    items: items,                    
                    cols: getWidth() >= 1024 ? 5 : 2,
                    emptyTemplate: `
                        <li class="item-content">
                            <div class="item-inner">
                                Loading...
                            </div>
                        </li>
                        `
            }


    
            $on('pageInit', async () => {
                window.addEventListener('resize', resizeListener)
                createVirtualList()
            })

            $on('pageBeforeOut', async () => {
                // unloadInfiniteScroll()
                window.removeEventListener('resize', resizeListener)
                // document.getElementById("item-list-infinite-scroll").removeEventListener( 'infinite', infiniteScroll )
            })

            $on('pageReinit', async (e, page) => {
                // console.log(`reinit: ${virtualList}`)
                // if (!virtualList) {
                //     createVirtualList() 
                //     await $update()
                // }
            })

            $on('pageAfterOut', (e, page) => {
            })
            

            const createVirtualList = () => {

                virtualList = $f7.virtualList.create(virtualListParams)

                if (virtualList.items?.length <= totalItemCount) {
                    document.getElementById("item-list-infinite-scroll").addEventListener( 'infinite', infiniteScroll )
                }

            }


            function unloadInfiniteScroll() {

                console.log("Unload infinite scroll")

                // Nothing more to load, detach infinite scroll events to prevent unnecessary loadings
                $f7.infiniteScroll.destroy('#item-list-infinite-scroll')
                $f7.virtualList.destroy('#explore-list')
                virtualList = undefined

                $('.infinite-scroll-preloader').hide()
            }

            async function infiniteScroll(e) {

                // Exit, if loading in progress
                if (loadingInProgress || !hasMoreItems) return

                console.log(`Infinite scrolling...`)

                // Set loading flag
                loadingInProgress = true

                try {
                    
                    let itemPage = await itemWebService.itemPage(pageCounter)

                    //Count actual items                    
                    itemsShown += itemPage.items.length

                    if (itemsShown >= totalItemCount) {
                        hasMoreItems = false
                    }

                    virtualList.appendItems(itemPage.items)
                    pageCounter++

                } catch (ex) {
                    console.log(ex)
                }

                $f7.preloader.hide()

                if (!hasMoreItems) {
                    unloadInfiniteScroll()
                }

                loadingInProgress = false
                

            }

            function getTemplate(rowItemViewModel) {
                
                return `<li class="flex-card">
                            <a href="${link(`item-show-${rowItemViewModel._id}.html`)}" class="item-link">
                                <div class="card" >
                                    <div class="card-content">
                                        <div class="square">
                                            <img src="${link(`backup/images/${rowItemViewModel.coverImageId}`)}.${rowItemViewModel.coverImageGenerated ? 'svg' : 'jpg'}"/>
                                        </div>
                                    </div>


                                    <div class="card-footer">
                                        ${rowItemViewModel.title}
                                    </div>
                                </div>
                            </a>
                        </li>
                `
            }

            const link = (href) => {
                return `${baseURL + href}`
            } 

            const countItems = (itemRows) => {
                //Count actual items
                let itemCount = 0
                
                for (let itemRow of itemRows) {
                    itemCount += itemRow.items?.length
                }

                return itemCount
            }

            document.querySelector('meta[property="og:title"]').setAttribute("content", "Explore <%=channelViewModel.channel.title%>")
            document.querySelector('meta[property="og:url"]').setAttribute("content", "<%= link(`explore.html`) %>")
            document.querySelector('meta[property="og:image"]').setAttribute("content", "<%= absoluteLink(`backup/images/${channelViewModel.channel.coverImageId}.jpg`) %>")
            document.querySelector('meta[property="og:description"]').setAttribute("content", "<%= escapeExcerpt(channelViewModel.channel.descriptionHTML)%>")

            document.querySelector('meta[property="twitter:url"]').setAttribute("content", "<%= link(`explore.html`) %>")
            document.querySelector('meta[property="twitter:title"]').setAttribute("content", "Explore <%=channelViewModel.channel.title%>")
            document.querySelector('meta[property="twitter:image"]').setAttribute("content", "<%= absoluteLink(`backup/images/${channelViewModel.channel.coverImageId}.jpg`) %>")
            document.querySelector('meta[property="twitter:description"]').setAttribute("content", "<%= escapeExcerpt(channelViewModel.channel.descriptionHTML)%>" )

            document.querySelector('title').innerHTML = "Explore <%=channelViewModel.channel.title%>"

            $f7.preloader.hide()

            return $render

        }


    </script>

    <script type="module" id="page-scripts">



      let routablePages = JSON.parse(`<%= JSON.stringify(routablePages) %>`)
      let app = reader.init('<%= baseURL %>', '<%= VERSION %>', routablePages )

    </script>

</body>

</html>